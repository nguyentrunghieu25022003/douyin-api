// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id         String  @id @default(uuid())
  username   String  @unique
  email      String  @unique
  password   String
  profilePic String?
  bio        String?

  videos   Video[]
  comments Comment[]
  replies  Reply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id       String @id @default(uuid())
  author   Author @relation(fields: [authorId], references: [id])
  authorId String

  title        String
  description  String?
  videoUrl     String
  thumbnailUrl String?
  duration     Int

  viewCount    Int @default(0)
  likeCount    Int @default(0)
  commentCount Int @default(0)
  shareCount   Int @default(0)

  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id       String @id @default(uuid())
  video    Video  @relation(fields: [videoId], references: [id])
  videoId  String
  author   Author @relation(fields: [authorId], references: [id])
  authorId String

  content String
  replies Reply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id        String  @id @default(uuid())
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
  author    Author  @relation(fields: [authorId], references: [id])
  authorId  String

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
