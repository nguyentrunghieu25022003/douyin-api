generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id             String          @id @default(uuid())
  username       String          @unique
  email          String          @unique
  password       String
  bio            String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  role           String          @default("user")
  profilePic     String[]
  comments       Comment[]
  commentLikes   CommentLike[]
  favoriteVideos FavoriteVideo[]
  followings     Follow[]        @relation("Follower")
  followers      Follow[]        @relation("Following")
  replies        Reply[]
  videos         Video[]
  videoLikes     VideoLike[]
}

model Video {
  id           String          @id @default(uuid())
  authorId     String
  title        String
  description  String?
  thumbnailUrl String?
  duration     Int
  viewCount    Int             @default(0)
  likeCount    Int             @default(0)
  commentCount Int             @default(0)
  shareCount   Int             @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  musicId      String?
  videoUrl     String?
  comments     Comment[]
  favoritedBy  FavoriteVideo[]
  author       Author          @relation(fields: [authorId], references: [id])
  music        Music?          @relation(fields: [musicId], references: [id])
  hashtags     VideoHashtag[]
  likes        VideoLike[]
}

model Music {
  id        String   @id @default(uuid())
  title     String
  artist    String?
  url       String
  duration  Int
  thumbnail String?
  createdAt DateTime @default(now())
  videos    Video[]
}

model Comment {
  id        String        @id @default(uuid())
  videoId   String
  authorId  String
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  author    Author        @relation(fields: [authorId], references: [id])
  video     Video         @relation(fields: [videoId], references: [id])
  likes     CommentLike[]
  replies   Reply[]
}

model Reply {
  id        String   @id @default(uuid())
  commentId String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    Author   @relation(fields: [authorId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])
}

model VideoLike {
  id             String   @id @default(uuid())
  userId         String
  videoId        String
  createdAt      DateTime @default(now())
  user           Author   @relation(fields: [userId], references: [id])
  video          Video    @relation(fields: [videoId], references: [id])
  @@unique([userId, videoId], name: "userId_videoId")
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      Author   @relation(fields: [userId], references: [id])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    Author   @relation("Follower", fields: [followerId], references: [id])
  following   Author   @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId], name: "followerId_followingId")
}

model Hashtag {
  id     String         @id @default(uuid())
  name   String         @unique
  videos VideoHashtag[]
}

model VideoHashtag {
  id        String  @id @default(uuid())
  videoId   String
  hashtagId String
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id])
  video     Video   @relation(fields: [videoId], references: [id])
}

model FavoriteVideo {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  user      Author   @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId], name: "userId_videoId")
}
